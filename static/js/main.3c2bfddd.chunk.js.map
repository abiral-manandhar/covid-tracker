{"version":3,"sources":["components/InfoBox.js","components/Table.js","util.js","components/Map.js","components/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","cases","total","active","props","className","Card","onClick","CardContent","Typography","color","Table","countries","map","country","numeral","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Mapp","zoom","Map","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setInputCountry","setCountryInfo","setCountries","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c2bfddd.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\nimport './box.css'\r\nfunction InfoBox({title, isRed, cases, total,active, ...props}) {\r\n    return (\r\n        <div  className = {`infoBox ${active && \"infoBox--selected\"} ${isRed && 'infoBox--red'}`}>\r\n            <Card\r\n            onClick = {props.onClick}\r\n            >\r\n                <CardContent>\r\n                    <Typography color = \"textSecondary\">\r\n                    {title}\r\n                    </Typography>\r\n                    \r\n                       <h2 className = {`infoBox__cases ${isRed?'infoBox--cases':'infoBox__cases--green'}`} >\r\n                        {cases}\r\n                        </h2> \r\n\r\n                        \r\n                    <Typography className = \"infoBox__total\" color = \"textSecondary\">\r\n                    {total}\r\n                    </Typography>\r\n\r\n                        \r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport './table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format('0,0')}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React from 'react'\r\nimport {Circle, Popup} from 'react-leaflet'\r\nimport numeral from 'numeral'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data]\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases > b.cases){\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases')=> (\r\n    data.map((country) => (\r\n        <Circle\r\n          center={[country.countryInfo.lat, country.countryInfo.long]}\r\n          color={casesTypeColors[casesType].hex}\r\n          fillColor={casesTypeColors[casesType].hex}\r\n          fillOpacity={0.4}\r\n          radius={\r\n            Math.sqrt(country[casesType] == 'cases' || 'recovered'?country[casesType]/15:country[casesType]) * casesTypeColors[casesType].multiplier\r\n          }\r\n        >\r\n <Popup>\r\n <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n </Popup>\r\n        </Circle>\r\n    ))\r\n)","import React from \"react\";\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport './Map.css'\r\nimport { showDataOnMap } from '../util'\r\n\r\n\r\nfunction Mapp({countries, casesType, center, zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <Map casesType = {casesType} center = {center} zoom= {zoom}>\r\n       \r\n        <TileLayer\r\n\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mapp;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 1,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases', ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","  \nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport Table from \"./components/Table\";\nimport Mapp from \"./components/Map\";\nimport {sortData} from './util.js'\nimport LineGraph from './components/LineGraph'\nimport 'leaflet/dist/leaflet.css'\nimport {prettyPrintStat} from './util'\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3)\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data)\n          setMapCountries(data);\n          setCountries(countries);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n        countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n   \n      countryCode === 'worldwide'?await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([34.80746,-40.4796])\n        setMapZoom(4)\n      }) :\n        await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n        setMapZoom(4)\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className = \"app__left\">\n      <div className = 'app__header'>\n      <h1>\nCOVID-19 TRACKER\n</h1>\n<FormControl className = \"app__dropdown\">\n  <Select\n  variant = \"outlined\"\n  value = {country}\n  onChange = {onCountryChange}\n  >\n        <MenuItem value = 'worldwide'>Worldwide</MenuItem>\n\n    {\n      countries.map((country)=>{\n        return(\n        <MenuItem value = {country.value}>{country.name}</MenuItem>\n      )})\n    }\n    </Select>\n</FormControl>\n\n      </div>\n      <div className = \"app__stats\">\n<InfoBox isRed active = {casesType == 'cases'} onClick = {e => setCasesType('cases')}title = \"Coronavirus Cases\"  cases = {prettyPrintStat(countryInfo.todayCases)} total = {countryInfo.cases}/>\n<InfoBox active = {casesType == 'recovered'} onClick = {e => setCasesType('recovered')}title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)}  total = {countryInfo.recovered}/>\n<InfoBox isRed active = {casesType == 'deaths'} onClick = {e => setCasesType('deaths')}title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)}  total = {countryInfo.deaths}/>\n\n      </div>\n<Mapp \n\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n/>\n      </div>\n      <Card className = \"app__right\">\n      <CardContent>\n        <h3>\n          Live Cases by country\n        </h3>\n        <Table countries = {tableData}/>\n        <h3>\n          Worldwide new {casesType}\n          <LineGraph className = \"app__graph\" casesType = {casesType}/>\n                  </h3>\n        \n      </CardContent>\n      </Card>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}